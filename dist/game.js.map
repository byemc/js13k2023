{
  "version": 3,
  "sources": ["../src/js/config.js", "../src/js/canvas.js", "../src/js/text.js", "../src/js/objects.js", "../src/js/keyboard.js", "../src/js/game.js"],
  "sourcesContent": ["// Holds all the config for your game.\r\n\r\nconst GAME_TITLE = \"Untitled JS13K23 Game.\"\r\n\r\nconst WIDTH = 256; // pixels\r\nconst HEIGHT = 256; // pixels\r\n\r\nexport { GAME_TITLE, WIDTH, HEIGHT };\r\n", "\r\n// Holds canvas, context and adds endpoints for graphics\r\n\r\nconst floor = function (...args) {\r\n    return Math.floor(...args);\r\n}\r\n\r\nclass Canvas {\r\n    constructor(id=\"c\", w=128, h=128) {\r\n        this.canvas = document.getElementById(id);\r\n        this.canvas.width = w;\r\n        this.canvas.height = h;\r\n\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        this.context.imageSmoothingEnabled = false;\r\n        this.context.textBaseline = \"top\";\r\n\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n    }\r\n\r\n    fill(c=\"black\") {\r\n        this.context.fillStyle = c;\r\n        this.context.fillRect(0, 0, this.width, this.height);\r\n    }\r\n    \r\n    drawImage(image, x, y, width = image.width, height = image.height) {\r\n        console.debug(\"drawImage\", image, x, y, width, height);\r\n        this.context.drawImage(image, x, y, width, height);\r\n    }\r\n\r\n    sliceImage(image, sx, sy, sw, sh, dx, dy, dw = sw, dh = sh) {\r\n        this.context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\r\n    }\r\n\r\n    drawText(text, x, y, c=\"white\", size=16, font=\"monospace\") {\r\n        this.context.fillStyle = c;\r\n        this.context.font = `${size}px ${font}`;\r\n        this.context.fillText(text, x, y);\r\n    }\r\n\r\n    drawLine(x1, y1, x2, y2, c=\"white\", w=1) {\r\n        this.context.strokeStyle = c;\r\n        this.context.lineWidth = w;\r\n        this.context.beginPath();\r\n        this.context.moveTo(x1, y1);\r\n        this.context.lineTo(x2, y2);\r\n        this.context.stroke();\r\n    }\r\n}\r\n\r\nexport { Canvas };\r\n", "// draws text to the screen by splicing a font sheet.\r\n\r\nclass TextRenderer {\r\n    constructor(canvas, fontimg) {\r\n        this.fontimg = fontimg; // MUST BE AN IMAGE OBJECT\r\n        this.fontWidth = 7;\r\n        this.fontHeight = 7;\r\n        this.fontChars = \"abcdefghijklmnopqrstuvwxyz1234567890.,!?:;)(~\";\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    drawLetter(letter, x, y) {\r\n        let index = this.fontChars.indexOf(letter.toLowerCase());\r\n        if (index == -1) {\r\n            return;\r\n        }\r\n        let sx = index * this.fontWidth;\r\n        let sy = 0;\r\n        // draw image to context\r\n        let yOffset = 0;\r\n        // if the letter is \",\", offset it by -1\r\n        if (letter == \",\") {\r\n            yOffset = -1;\r\n        }\r\n        this.canvas.sliceImage(this.fontimg, sx, sy, this.fontWidth, this.fontHeight, x, y-yOffset, this.fontWidth, this.fontHeight);\r\n    }\r\n\r\n    render(text, x, y) {\r\n        let heightOffset = 0;\r\n        let xOffset = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text[i] == \"\\n\") {\r\n                heightOffset++;\r\n                xOffset = 0;\r\n                continue;\r\n            }\r\n            this.drawLetter(text[i], x + (xOffset * this.fontWidth), y + (heightOffset * this.fontHeight));\r\n            xOffset++;\r\n        }\r\n    }\r\n\r\n    throwPanic = (err) => {\r\n        // This function is called when an error is caught but unhandled.\r\n        // It'll show the error on-screen.\r\n    \r\n        this.canvas.fill(\"#00000080\") // 50% black\r\n        this.render(err, 0, 0);\r\n        throw err;\r\n    }\r\n}\r\n\r\nexport { TextRenderer };", "class Object {\r\n    draw() {}\r\n    step() {}\r\n}\r\n\r\nclass Room extends Object {\r\n    constructor() {\r\n        super();\r\n        this.objects = [];\r\n    }\r\n\r\n    draw() {\r\n        for (let i = 0; i < this.objects.length; i++) {\r\n            this.objects[i].draw();\r\n        }\r\n    }\r\n\r\n    drawGUI() {\r\n\r\n    }\r\n\r\n    step() {\r\n        for (let i = 0; i < this.objects.length; i++) {\r\n            this.objects[i].step();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { Object, Room };", "// Manages keyboard inputs. Code may have been stolen from herebefrogs/gamejam-boilerplate, under MIT license.\r\n\r\n/** Keyboard input\r\n * Record time at which each key gets pressed\r\n * and provide utilities to queries which keys are pressed or released\r\n *\r\n * Note: importing any public function of this module\r\n * will install the keyboard event listeners\r\n */\r\n\r\n/* private */\r\n\r\n// time at which each key was pressed\r\n// key = KeyboardEvent.code\r\n// value = time in ms at which keyboard event was first emitted (repeats are filtered out)\r\nconst KEYS = {};\r\n\r\nconst _isKeyDown = code => KEYS[code] || 0;\r\n\r\nconst _releaseKey = code => delete KEYS[code];\r\n\r\naddEventListener('keydown', e => {\r\n  // prevent itch.io from scrolling the page up/down\r\n  // e.preventDefault();\r\n\r\n  if (!e.repeat) {\r\n    KEYS[e.code] = performance.now();\r\n  }\r\n});\r\n\r\naddEventListener('keyup', e => _releaseKey(e.code));\r\n\r\n\r\n\r\n\r\n/* public API */\r\n\r\n// returns the most recent key pressed amongst the array passed as argument (or 0 if none were)\r\nexport const isKeyDown = (...codes) => Math.max(...codes.map(code => _isKeyDown(code)))\r\n\r\n// retuns the list of keys currently pressed\r\nexport const whichKeyDown = () => Object.keys(KEYS).filter(code => _isKeyDown(code));\r\n\r\n// returns if any key is currently pressed\r\nexport const anyKeyDown = () => whichKeyDown().length;\r\n\r\n// return true if a key can be released (must be currently pressed) or false if it can't\r\n// note: this \"consumes\" the key pressed by releasing it (only if it was pressed)\r\nexport const isKeyUp = code => _isKeyDown(code) ? _releaseKey(code) : false;", "\r\nimport { WIDTH, HEIGHT, GAME_TITLE } from \"./config.js\";\r\nimport { Canvas } from \"./canvas.js\";\r\nimport { TextRenderer } from \"./text.js\";\r\nimport { Room, Object } from \"./objects.js\";\r\nimport { isKeyDown } from \"./keyboard.js\";\r\n\r\nlet assets = {\r\n    images: {\r\n        splash: \"../img/splash1.webp\",\r\n        splash2: \"../img/splash2.webp\",\r\n        font: \"../img/hampsterfont.webp\"\r\n    }\r\n}\r\n\r\nlet currentFrame = 0;\r\nlet targetFrames = 60;\r\n\r\nlet lastFrameTime = performance.now();\r\nlet startFrameTime = lastFrameTime;\r\n\r\nlet rooms = [];\r\nlet canvas = new Canvas(\"c\", WIDTH, HEIGHT);\r\nlet text;\r\ncanvas.fill(\"#222034\");\r\n\r\nlet splash = new Image();\r\nsplash.src = assets.images.splash;\r\nsplash.onload = () => {\r\n    canvas.drawImage(splash, canvas.width / 2 - splash.width / 2, canvas.height / 2 - splash.height / 2);\r\n    let font = new Image();\r\n    font.src = assets.images.font;\r\n    font.onload = () => {\r\n        console.log(\"font loaded\")\r\n        text = new TextRenderer(canvas, font);\r\n        window.onerror = (e) => {\r\n            text.throwPanic(e);\r\n        }\r\n    }\r\n}\r\n\r\nclass DebugEntity extends Object {\r\n    constructor() {\r\n        super();\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    draw() {\r\n        canvas.context.fillStyle = \"red\";\r\n        canvas.context.fillRect(this.x, this.y, 10, 10);\r\n    }\r\n}\r\n\r\n// Create all the game rooms\r\n\r\nlet loadingRoom = new Room(\"loading\");\r\nloadingRoom.updateStatus = (status) => {\r\n    console.log(status);\r\n    canvas.fill(\"#222034\");\r\n    canvas.drawImage(splash, canvas.width / 2 - splash.width / 2, canvas.height / 2 - splash.height / 2);\r\n    text.render(status, 0, 0);\r\n}\r\n\r\nlet debugRoom = new Room(\"debug\");\r\ndebugRoom.draw = () => {\r\n    canvas.fill(\"#222034\");\r\n    canvas\r\n    for (let i = 0; i < debugRoom.objects.length; i++) {\r\n        debugRoom.objects[i].draw();\r\n    }\r\n}\r\ndebugRoom.drawGUI = () => {\r\n    text.render(\"Welcome to the Debug Room,\\nwe've got fun and games\", 0, canvas.height-14);\r\n    text.render(\"Current Frame:\" + currentFrame + `(~${Math.floor((currentFrame/targetFrames)*100)/100}sec)`, 0, canvas.height-21);\r\n}\r\nlet testObject = new DebugEntity(0, 0);\r\ndebugRoom.objects.push(testObject);\r\n\r\nrooms.push(loadingRoom);\r\nrooms.push(debugRoom);\r\n\r\nlet roomIndex = 0;\r\nlet currentRoom = rooms[roomIndex];\r\n\r\nlet main = () => { // main game loop\r\n    requestAnimationFrame(main);\r\n\r\n    let now = performance.now();\r\n    let delta = now - lastFrameTime;\r\n\r\n    if (delta < 1000 / targetFrames) return;\r\n\r\n    currentFrame++;\r\n    \r\n    currentRoom.draw();\r\n    currentRoom.drawGUI();\r\n\r\n    lastFrameTime = now;\r\n\r\n    text.render(\"FPS:\" + Math.round(1000 / delta), 0, 0);\r\n}\r\n\r\nlet init = () => {\r\n    // begin loading all the assets.\r\n    currentRoom.updateStatus(\"Loading images...\");\r\n    for (let image in assets.images) {\r\n        currentRoom.updateStatus(\"Loading image \" + image);\r\n        let img = new Image();\r\n        img.src = assets.images[image];\r\n        img.onload = () => {\r\n            assets.images[image] = img;\r\n        }\r\n    }\r\n    currentRoom.updateStatus(\"Loading complete!\");\r\n\r\n    canvas.fill(\"#222034\");\r\n    canvas.drawImage(splash, canvas.width / 2 - splash.width / 2, canvas.height / 2 - splash.height / 2);\r\n    setTimeout(() => {\r\n        currentRoom = rooms[1];\r\n        main();\r\n    }, 1000);\r\n}\r\n\r\nwindow.onload = () => {\r\n    try {\r\n        document.title = GAME_TITLE;\r\n        init();\r\n    } catch (e) {\r\n        text.throwPanic(e);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
